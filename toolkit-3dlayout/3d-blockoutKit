<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Bedroom Furniture Arrangement (Outlined with Lock)</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { width: 100%; height: 100vh; }
        #controls {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            font-family: Arial, sans-serif;
        }
        button { margin: 5px; padding: 5px 10px; }
        #lockButton.active { background-color: #ff4444; color: white; }
    </style>
</head>
<body>
    <div id="controls">
        <button onclick="addFurniture('bed')">Add Bed (5x6.67ft)</button>
        <button onclick="addFurniture('dresser')">Add Dresser (5x1.5ft)</button>
        <button onclick="addFurniture('chair')">Add Chair (2x2ft)</button>
        <button onclick="addFurniture('desk')">Add Desk (4x2ft)</button>
        <button onclick="addFurniture('wardrobe')">Add Wardrobe (3x2ft)</button>
        <button onclick="addFurniture('nightstand')">Add Nightstand (2x1.5ft)</button>
        <button onclick="addFurniture('lamp')">Add Floor Lamp (1x1ft)</button>
        <button id="lockButton" onclick="toggleLock()">Lock View</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.134/examples/js/controls/OrbitControls.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Lighting
        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
        directionalLight.position.set(0, 10, 10);
        scene.add(directionalLight);

        // Floor (16x14ft room, 1 unit = 1ft)
        const floorGeometry = new THREE.PlaneGeometry(16, 14);
        const floorMaterial = new THREE.MeshBasicMaterial({ color: 0xaaaaaa, side: THREE.DoubleSide });
        const floor = new THREE.Mesh(floorGeometry, floorMaterial);
        floor.rotation.x = Math.PI / 2;
        scene.add(floor);

        // Camera position
        camera.position.set(0, 10, 10);
        camera.lookAt(0, 0, 0);

        // Orbit controls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;

        // Furniture array
        const furniture = [];

        // Add furniture with outline
        function addFurniture(type) {
            let geometry, material, mesh, outline;
            const edgeMaterial = new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 2 });

            if (type === 'bed') {
                geometry = new THREE.BoxGeometry(5, 1, 6.67); // Queen bed
                material = new THREE.MeshBasicMaterial({ color: 0x8b4513 });
            } else if (type === 'dresser') {
                geometry = new THREE.BoxGeometry(5, 2, 1.5);
                material = new THREE.MeshBasicMaterial({ color: 0x4682b4 });
            } else if (type === 'chair') {
                geometry = new THREE.BoxGeometry(2, 2, 2);
                material = new THREE.MeshBasicMaterial({ color: 0x228b22 });
            } else if (type === 'desk') {
                geometry = new THREE.BoxGeometry(4, 2, 2);
                material = new THREE.MeshBasicMaterial({ color: 0x8a2be2 });
            } else if (type === 'wardrobe') {
                geometry = new THREE.BoxGeometry(3, 4, 2);
                material = new THREE.MeshBasicMaterial({ color: 0xa0522d });
            } else if (type === 'nightstand') {
                geometry = new THREE.BoxGeometry(2, 1.5, 1.5);
                material = new THREE.MeshBasicMaterial({ color: 0xffa500 });
            } else if (type === 'lamp') {
                geometry = new THREE.BoxGeometry(1, 3, 1);
                material = new THREE.MeshBasicMaterial({ color: 0xffff00 });
            }

            // Create mesh
            mesh = new THREE.Mesh(geometry, material);
            mesh.position.y = mesh.geometry.parameters.height / 2; // Place on floor
            mesh.userData = { draggable: true, type: type };
            scene.add(mesh);

            // Add outline
            const edges = new THREE.EdgesGeometry(geometry);
            outline = new THREE.LineSegments(edges, edgeMaterial);
            mesh.add(outline);

            furniture.push(mesh);
        }

        // Raycaster for dragging
        const raycaster = new THREE.Raycaster();
        const mouse = new THREE.Vector2();
        let selectedObject = null;

        // Mouse events
        window.addEventListener('mousedown', onMouseDown);
        window.addEventListener('mousemove', onMouseMove);
        window.addEventListener('mouseup', onMouseUp);
        window.addEventListener('keydown', onKeyDown); // For rotation

        function onMouseDown(event) {
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObjects(furniture);
            if (intersects.length > 0) {
                selectedObject = intersects[0].object;
                // Only disable controls if not locked
                if (!document.getElementById('lockButton').classList.contains('active')) {
                    controls.enabled = false;
                }
            }
        }

        function onMouseMove(event) {
            if (selectedObject) {
                mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
                mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
                raycaster.setFromCamera(mouse, camera);
                const intersects = raycaster.intersectObject(floor);
                if (intersects.length > 0) {
                    const point = intersects[0].point;
                    selectedObject.position.x = Math.max(-7.5, Math.min(7.5, point.x)); // Keep within 16ft
                    selectedObject.position.z = Math.max(-6.5, Math.min(6.5, point.z)); // Keep within 14ft
                }
            }
        }

        function onMouseUp() {
            selectedObject = null;
            if (!document.getElementById('lockButton').classList.contains('active')) {
                controls.enabled = true;
            }
        }

        // Rotate with arrow keys
        function onKeyDown(event) {
            if (selectedObject) {
                if (event.key === 'ArrowLeft') {
                    selectedObject.rotation.y += Math.PI / 12; // Rotate 15 degrees
                } else if (event.key === 'ArrowRight') {
                    selectedObject.rotation.y -= Math.PI / 12;
                }
            }
        }

        // Lock toggle function
        let isLocked = false;
        function toggleLock() {
            const lockButton = document.getElementById('lockButton');
            isLocked = !isLocked;
            controls.enabled = !isLocked;
            lockButton.classList.toggle('active', isLocked);
            lockButton.textContent = isLocked ? 'Unlock View' : 'Lock View';
        }

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }
        animate();

        // Resize handler
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>
